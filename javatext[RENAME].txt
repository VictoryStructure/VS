package auction;
import java.io.*;
import java.util.*;

public class Product implements Comparable<Product>, Serializable{
    private String name;
    private int lastSalePrice = 0;
    private int maxSalePrice = 0;
    private double salePrice;
    private ProductType type;

    // Enums
    public enum ProductType {
        WINE(),
        WHISKY(),
        BOOK();

        private int lastSalePrice;
        private int maxSalePrice;

        // Constructor
        ProductType(int a, int b){
            lastSalePrice = a;
            maxSalePrice = b;
        }

        // Default constructor
        ProductType() {
        }
    }

    // Compare Sale Price
    public int compareTo(Product a) {
        return Integer.compare((int) getSalePrice(), (int) a.getSalePrice());
    }

    // Compare Product Type
    public static int CompareProductType(Product a, Product b){
        return a.type.compareTo(b.getType());
    }

    // Compare Max Price
    public static int CompareMaxPrice(Product a, Product b){
        return Integer.compare(b.getMaxSalePrice(), a.getMaxSalePrice());
    }

    // Lambda method
    static Comparator<Product>createLambda(){
        Comparator<Product> CompareName = (a,b) -> a.getName().compareTo(b.getName());
        return CompareName;
    }

    // Constructor
    public Product( ProductType type, String name) {
        this.name = name;
        this.type = type;
    }

    // toString Method
    public String toString() {
        return "Product{" +
                "name='" + name + '\'' +
                ", lastSalePrice=" + lastSalePrice +
                ", maxSalePrice=" + maxSalePrice +
                ", salePrice=" + salePrice +
                ", type=" + type +
                '}';
    }

    // Random Product Generator
    public static ProductType randomProduct(){
        return ProductType.values()[new Random().nextInt(ProductType.values().length)];
    }

    // Serialising Object Files
    public static void saveFilename(String filename, Product p){
        try{
            FileOutputStream fos = new FileOutputStream(filename);
            ObjectOutputStream out = new ObjectOutputStream(fos);
            out.writeObject(p);
            out.close();
            System.out.println("File Saved");
        } catch (FileNotFoundException e){
            System.out.println("Error cannot find file");
        } catch (IOException e){
            System.out.println("Error cannot writ to save file");
        }
    }

    // Deserializing Object Files
    public static Product loadFile(String fileName){
        try{
            FileInputStream fis = new FileInputStream(fileName);
            ObjectInputStream in = new ObjectInputStream(fis);
            Product product = (Product)in.readObject();
            in.close();
            System.out.println("File Loaded");
            return product;
        }catch (FileNotFoundException e){
            System.out.println("Error cannot load File");
        }catch (IOException e){
            System.out.println("Error cannot read from File");
        }catch (ClassNotFoundException e){
            System.out.println("Cast to Product failed");
        }
        return null;
    }

    // Accessor Methods
    public double getSalePrice() {
        return salePrice;
    }

    public void setSalePrice(double salePrice) {
        this.salePrice = salePrice;
    }

    public ProductType getType() {
        return type;
    }

    public void setType(ProductType type) {
        this.type = type;
    }

    public int getLastSalePrice() {
        return lastSalePrice;
    }

    public void setLastSalePrice(int lastSalePrice) {
        this.lastSalePrice = lastSalePrice;
        if(lastSalePrice > maxSalePrice){
            setMaxSalePrice(lastSalePrice);
        }
    }

    public int getMaxSalePrice() {
        return maxSalePrice;
    }

    public void setMaxSalePrice(int maxSalePrice) {
        this.maxSalePrice = maxSalePrice;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }



    // Test Harness
    public static void main(String[] args) throws IOException, ClassNotFoundException {
        // a)
        Product product1 = new Product(ProductType.WINE, "Rioja");
        Product product2 = new Product(ProductType.WHISKY, "Maker's Mark");
        Product product3 = new Product(ProductType.BOOK, "Lord of the Rings");

        // b)
        System.out.println("b)");
        saveFilename("Product1.ser", product1);
        saveFilename("Product2.ser", product1);
        saveFilename("Product3.ser", product1);

        // c)
        System.out.println("c)");
        product1.setSalePrice(100);
        product2.setSalePrice(50);
        product3.setSalePrice(200);
        product1.setLastSalePrice(100);
        product2.setLastSalePrice(50);
        product3.setLastSalePrice(200);

        System.out.println(product1);
        System.out.println(product2);
        System.out.println(product3);

        // d)
        int[] compare1Test = new int[3];
        compare1Test[0] = product1.compareTo(product2);
        compare1Test[1] = product1.compareTo(product3);
        compare1Test[2] = product2.compareTo(product3);
        System.out.println("d)");
        System.out.println(Arrays.toString(compare1Test));

        // e)
        Comparator<Product> compare2 = Product::CompareProductType;
        Comparator<Product> compare3 = Product::CompareMaxPrice;
        Comparator<Product> compare4 = Product.createLambda();

        // f)
        int[] compare2Test = new int [3];
        compare2Test[0] = CompareProductType(product1, product2);
        compare2Test[1] = CompareProductType(product1, product3);
        compare2Test[2] = CompareProductType(product3, product3);
        int[] compare3Test = new int [3];
        compare3Test[0] = CompareMaxPrice(product1, product2);
        compare3Test[1] = CompareMaxPrice(product1, product3);
        compare3Test[2] = CompareMaxPrice(product2, product3);
        int[] compare4Test = new int [3];
        compare4Test[0] = createLambda().compare(product1, product2);
        compare4Test[1] = createLambda().compare(product1, product3);
        compare4Test[2] = createLambda().compare(product2, product3);

        // g)
        System.out.println("g)");
        System.out.println(Arrays.toString(compare2Test));
        System.out.println(Arrays.toString(compare3Test));
        System.out.println(Arrays.toString(compare4Test));

        // h)
        System.out.println("h)");
        System.out.println(loadFile("Product1.ser"));
        System.out.println(loadFile("Product2.ser"));
        System.out.println(loadFile("Product3.ser"));


    }
}